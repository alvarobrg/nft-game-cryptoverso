{"version":3,"sources":["constants.js","Components/LoadingIndicator/index.js","Components/SelectCharacter/index.js","assets/twitter-logo.svg","Components/Arena/index.js","App.js","index.js"],"names":["CONTRACT_ADDRESS","transformCharacterData","name","imageURI","hp","maxHp","attackDamage","toNumber","LoadingIndicator","className","SelectCharacter","setCharacterNFT","useState","characters","setCharacters","gameContract","setGameContract","mintingCharacter","setMintingCharacter","useEffect","ethereum","window","signer","ethers","providers","Web3Provider","getSigner","Contract","myEpicGame","abi","console","log","getCharacters","getAllDefaultCharacters","charactersTxn","map","characterData","error","onCharacterMint","sender","tokenId","characterIndex","checkIfUserHasNFT","characterNFT","alert","on","off","length","character","index","src","alt","type","onClick","characterId","mintCharacterNFT","mintTxn","wait","warn","Arena","boss","setBoss","attackState","setAttackState","showToast","setShowToast","fetchBoss","getBigBoss","bossTxn","onAttackComplete","newBossHp","newPlayerHp","bossHp","playerHp","prevState","runAttackAction","attackBoss","attackTxn","setTimeout","id","value","max","TWITTER_HANDLE","TWITTER_LINK","App","currentAccount","setCurrentAccount","isLoading","setIsLoading","checkIfWalletIsConnected","request","method","accounts","account","fetchNFTMetadata","provider","txn","connectWalletAction","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c50a66b9.chunk.js","sourcesContent":["export const CONTRACT_ADDRESS = \"0x951b62E321Ef2391914B35Af0e3b8FD7737652d2\";\n\nexport const transformCharacterData = ({\n  name,\n  imageURI,\n  hp,\n  maxHp,\n  attackDamage,\n}) => {\n  return {\n    name,\n    imageURI,\n    hp: hp.toNumber(),\n    maxHp: maxHp.toNumber(),\n    attackDamage: attackDamage.toNumber(),\n  };\n};","import React from 'react';\r\nimport './LoadingIndicator.css';\r\n\r\nconst LoadingIndicator = () => {\r\n  return (\r\n    <div className=\"lds-ring\">\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadingIndicator;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./SelectCharacter.css\";\r\nimport { ethers } from \"ethers\";\r\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"../../constants\";\r\nimport myEpicGame from \"../../utils/MyEpicGame.json\";\r\nimport LoadingIndicator from \"../LoadingIndicator\";\r\n/*\r\n * Não se preocupe com setCharacterNFT ainda, vamos falar dele logo.\r\n */\r\nconst SelectCharacter = ({ setCharacterNFT }) => {\r\n  const [characters, setCharacters] = useState([]);\r\n  const [gameContract, setGameContract] = useState(null);\r\n  const [mintingCharacter, setMintingCharacter] = useState(false);\r\n\r\n  // Actions\r\n  const mintCharacterNFTAction = (characterId) => async () => {\r\n    try {\r\n      if (gameContract) {\r\n        /*\r\n         * Mostre nosso indicador de carregamento\r\n         */\r\n        setMintingCharacter(true);\r\n        console.log(\"Mintando personagem...\");\r\n        const mintTxn = await gameContract.mintCharacterNFT(characterId);\r\n        await mintTxn.wait();\r\n        console.log(mintTxn);\r\n        /*\r\n         * Esconde nosso indicador de carregamento quando o mint for terminado\r\n         */\r\n        setMintingCharacter(false);\r\n      }\r\n    } catch (error) {\r\n      console.warn(\"Ação de mintar com erro: \", error);\r\n      /*\r\n       * Se tiver um problema, esconda o indicador de carregamento também\r\n       */\r\n      setMintingCharacter(false);\r\n    }\r\n  };\r\n\r\n    \r\n  // UseEffect\r\n  useEffect(() => {\r\n    const { ethereum } = window;\r\n\r\n    if (ethereum) {\r\n      const provider = new ethers.providers.Web3Provider(ethereum);\r\n      const signer = provider.getSigner();\r\n      const gameContract = new ethers.Contract(\r\n        CONTRACT_ADDRESS,\r\n        myEpicGame.abi,\r\n        signer\r\n      );\r\n\r\n      /*\r\n      * Essa é a grande diferença. Configura nosso gameContract no estado.\r\n      */\r\n      setGameContract(gameContract);\r\n    } else {\r\n      console.log(\"Objeto Ethereum não encontrado\");\r\n    }\r\n  }, []);\r\n\r\n  \r\n  useEffect(() => {\r\n    const getCharacters = async () => {\r\n      try {\r\n        console.log(\"Trazendo personagens do contrato para mintar\");\r\n  \r\n        const charactersTxn = await gameContract.getAllDefaultCharacters();\r\n        console.log(\"charactersTxn:\", charactersTxn);\r\n  \r\n        const characters = charactersTxn.map((characterData) =>\r\n          transformCharacterData(characterData)\r\n        );\r\n  \r\n        setCharacters(characters);\r\n      } catch (error) {\r\n        console.error(\"Algo deu errado ao trazer personagens:\", error);\r\n      }\r\n    };\r\n  \r\n    /*\r\n     * Adiciona um método callback que vai disparar quando o evento for recebido\r\n     */\r\n    const onCharacterMint = async (sender, tokenId, characterIndex) => {\r\n      console.log(\r\n        `CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`\r\n      );\r\n  \r\n      /*\r\n       * Uma vez que nosso personagem for mintado, podemos buscar os metadados a partir do nosso contrato e configurar no estado para se mover para a Arena.\r\n       */\r\n      if (gameContract) {\r\n        const characterNFT = await gameContract.checkIfUserHasNFT();\r\n        console.log(\"CharacterNFT: \", characterNFT);\r\n        setCharacterNFT(transformCharacterData(characterNFT));\r\n\r\n        alert(\r\n          `Seu NFT está pronto. Pode atacar o Mister M ;`\r\n        );\r\n\r\n      }\r\n    };\r\n  \r\n    if (gameContract) {\r\n      getCharacters();\r\n  \r\n      /*\r\n       * Configurar NFT Minted Listener\r\n       */\r\n      gameContract.on(\"CharacterNFTMinted\", onCharacterMint);\r\n    }\r\n  \r\n    return () => {\r\n      /*\r\n       * Quando seu componente se desmonta, vamos limpar esse listener\r\n       */\r\n      if (gameContract) {\r\n        gameContract.off(\"CharacterNFTMinted\", onCharacterMint);\r\n      }\r\n    };\r\n    }, [gameContract]);\r\n\r\n\r\n  // Métodos de renderização\r\n  const renderCharacters = () =>\r\n    characters.map((character, index) => (\r\n      <div className=\"character-item\" key={character.name}>\r\n        <div className=\"name-container\">\r\n          <p>{character.name}</p>\r\n        </div>\r\n        <img src={`https://cloudflare-ipfs.com/ipfs/${character.imageURI}`} alt={character.name} />\r\n        <button\r\n          type=\"button\"\r\n          className=\"character-mint-button\"\r\n           onClick={mintCharacterNFTAction(index)} \r\n          // você deve descomentar essa linha depois que criar a função mintCharacterNFTAction\r\n        >{`Mintar ${character.name}`}</button>\r\n      </div>\r\n    ));    \r\n\r\n    return (\r\n      <div className=\"select-character-container\">\r\n        <h2>Minte seu Herói Crypto. A escolha é óbvia?</h2>\r\n        {/* Só mostra isso se tiver personagens no estado\r\n         */}\r\n        {characters.length > 0 && (\r\n          <div className=\"character-grid\">{renderCharacters()}</div>\r\n        )}\r\n\r\n        {/* Só mostre o seu indicador de carregamento se mintingCharacter for verdadeiro */}\r\n        {mintingCharacter && (\r\n          <div className=\"loading\">\r\n            <div className=\"indicator\">\r\n              <LoadingIndicator />*/\r\n              <p>Mintando personagem...</p>\r\n            </div>\r\n            <img\r\n              src=\"http://pa1.narvii.com/6623/1d810c548fc9695d096d54372b625d207373130a_00.gif\"\r\n              alt=\"Indicador de Mintagem\"\r\n            />\r\n          </div>\r\n          )}        \r\n      </div>\r\n    );\r\n};\r\n\r\nexport default SelectCharacter;","export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","import React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"../../constants\";\nimport myEpicGame from \"../../utils/MyEpicGame.json\";\nimport \"./Arena.css\";\nimport LoadingIndicator from \"../LoadingIndicator\";\n\n/*\n * Passamos os metadados do nosso personagem NFT para que podemos ter um card legal na nossa UI\n */\nconst Arena = ({ characterNFT, setCharacterNFT }) => {\n  // estado\n  const [gameContract, setGameContract] = useState(null);\n  const [boss, setBoss] = useState(null);\n  const [attackState, setAttackState] = useState(\"\");\n  const [showToast, setShowToast] = useState(false);\n \n\n  useEffect(() => {\n    const fetchBoss = async () => {\n        const bossTxn = await gameContract.getBigBoss();\n        console.log('Boss:', bossTxn);\n        setBoss(transformCharacterData(bossTxn));\n    };\n\n    /*\n    * Configura a lógica quando esse evento for disparado\n    */\n    const onAttackComplete = (newBossHp, newPlayerHp) => {\n        const bossHp = newBossHp.toNumber();\n        const playerHp = newPlayerHp.toNumber();\n\n        console.log(`AttackComplete: Boss Hp: ${bossHp} Player Hp: ${playerHp}`);\n\n        /*\n        * Atualiza o hp do boss e do player\n        */\n        setBoss((prevState) => {\n            return { ...prevState, hp: bossHp };\n        });\n\n        setCharacterNFT((prevState) => {\n            return { ...prevState, hp: playerHp };\n        });\n    };\n\n    if (gameContract) {\n        fetchBoss();\n        gameContract.on('AttackComplete', onAttackComplete);\n    }\n\n    /*\n    * Tem certeza de limpar esse evento quando componente for removido\n    */\n    return () => {\n        if (gameContract) {\n            gameContract.off('AttackComplete', onAttackComplete);\n        }\n    }\n  }, [gameContract]);\n\n\n  // UseEffects\n  useEffect(() => {\n    const { ethereum } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n\n      setGameContract(gameContract);\n    } else {\n      console.log(\"Objeto Ethereum não encontrado\");\n    }\n  }, []);\n\n  const runAttackAction = async () => {\n    try {\n      if (gameContract) {\n        setAttackState(\"attacking\");\n        console.log(\"Atacando o boss...\");\n        const attackTxn = await gameContract.attackBoss();\n        await attackTxn.wait();\n        console.log(\"attackTxn:\", attackTxn);\n        setAttackState(\"hit\");\n\n        setShowToast(true);\n        setTimeout(() => {\n          setShowToast(false);\n        }, 5000);\n        \n      }\n    } catch (error) {\n      console.error(\"Erro atacando o boss:\", error);\n      setAttackState(\"\");\n    }\n  };\n\n  return (\n    <div className=\"arena-container\">\n\n    {/* Add your toast HTML right here */}\n    {boss && characterNFT && (\n      <div id=\"toast\" className={showToast ? \"show\" : \"\"}>\n        <div id=\"desc\">{`💥 ${boss.name} tomou ${characterNFT.attackDamage} de dano!`}</div>\n      </div>\n    )}\n\n      {/* Boss */}\n        {boss && (\n      <div className=\"boss-container\">\n        <div className={`boss-content  ${attackState}`}>\n          <h2>🔥 {boss.name} 🔥</h2>\n          <div className=\"image-content\">\n            <img src={`https://cloudflare-ipfs.com/ipfs/${boss.imageURI}`} alt={`Boss ${boss.name}`} />\n            <div className=\"health-bar\">\n              <progress value={boss.hp} max={boss.maxHp} />\n              <p>{`${boss.hp} / ${boss.maxHp} HP`}</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"attack-container\">\n          <button className=\"cta-button\" onClick={runAttackAction}>\n            {`💥 Atacar ${boss.name}`}\n          </button>\n        </div>\n        {/* Adicione isso embaixo do seu botão de ataque */}\n        {attackState === \"attacking\" && (\n          <div className=\"loading-indicator\">\n            <LoadingIndicator />\n            <p>Atacando ⚔️</p>\n          </div>\n        )}\n      </div>\n    )}\n      \n      {characterNFT && (\n            <div className=\"players-container\">\n              <div className=\"player-container\">\n                <h2>Seu Personagem</h2>\n                <div className=\"player\">\n                  <div className=\"image-content\">\n                    <h2>{characterNFT.name}</h2>\n                    <img\n                      src={`https://cloudflare-ipfs.com/ipfs/${characterNFT.imageURI}`}\n                      alt={`Character ${characterNFT.name}`}\n                    />\n                    <div className=\"health-bar\">\n                      <progress value={characterNFT.hp} max={characterNFT.maxHp} />\n                      <p>{`${characterNFT.hp} / ${characterNFT.maxHp} HP`}</p>\n                    </div>\n                  </div>\n                  <div className=\"stats\">\n                    <h4>{`⚔️ Dano de Ataque: ${characterNFT.attackDamage}`}</h4>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}      \n    </div>\n  );\n\n  \n};\n\nexport default Arena;","/*\r\n * Nós vamos precisar usar estados agora! Não esqueça de importar useState\r\n */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport SelectCharacter from \"./Components/SelectCharacter\";\r\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"./constants\"\r\nimport twitterLogo from \"./assets/twitter-logo.svg\";\r\nimport myEpicGame from \"./utils/MyEpicGame.json\";\r\nimport { ethers } from \"ethers\";\r\nimport Arena from './Components/Arena';\r\nimport LoadingIndicator from \"./Components/LoadingIndicator\";\r\n\r\nconst TWITTER_HANDLE = \"deficryptomoon\";\r\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\r\n\r\nconst App = () => {\r\n\r\n  const [currentAccount, setCurrentAccount] = useState(null);\r\n  const [characterNFT, setCharacterNFT] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const checkIfWalletIsConnected = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        console.log(\"Eu acho que você não tem a metamask!\");\r\n        setIsLoading(false);\r\n        return;\r\n      } else {\r\n        console.log(\"Nós temos o objeto ethereum\", ethereum);\r\n\r\n        const accounts = await ethereum.request({ method: \"eth_accounts\" });\r\n\r\n        if (accounts.length !== 0) {\r\n          const account = accounts[0];\r\n          console.log(\"Carteira conectada::\", account);\r\n          setCurrentAccount(account);\r\n        } else {\r\n          console.log(\"Não encontramos uma carteira conectada\");\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  \r\n  useEffect(() => {\r\n  \r\n    const fetchNFTMetadata = async () => {\r\n      console.log(\"Verificando pelo personagem NFT no endereço:\", currentAccount);\r\n    \r\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n      const signer = provider.getSigner();\r\n      const gameContract = new ethers.Contract(\r\n        CONTRACT_ADDRESS,\r\n        myEpicGame.abi,\r\n        signer\r\n      );\r\n    \r\n      const txn = await gameContract.checkIfUserHasNFT();\r\n      \r\n      if (txn.name) {\r\n        console.log(\"Usuário tem um personagem NFT\");\r\n        setCharacterNFT(transformCharacterData(txn));\r\n      } else {\r\n        console.log(\"Nenhum personagem NFT foi encontrado\");\r\n      }\r\n\r\n      setIsLoading(false);\r\n\r\n    };\r\n\r\n    if (currentAccount) {\r\n      console.log(\"Conta Atual:\", currentAccount);\r\n      fetchNFTMetadata();\r\n    }\r\n  }, [currentAccount]);  \r\n\r\n  \r\n  const renderContent = () => {\r\n    if (isLoading) {\r\n      return <LoadingIndicator />;\r\n    }\r\n\r\n    if (!currentAccount) {\r\n      return (\r\n        <div className=\"connect-wallet-container\">\r\n          <img\r\n            src=\"https://c.tenor.com/7qk-guJPtoIAAAAd/battle-of-the-crypto.gif\"\r\n            alt=\"Crypto Gif\"\r\n          />\r\n          <button\r\n            className=\"cta-button connect-wallet-button\"\r\n            onClick={connectWalletAction}\r\n          >\r\n            Conecte sua carteira para começar\r\n          </button>\r\n        </div>\r\n      );\r\n    } else if (currentAccount && !characterNFT) {\r\n      return <SelectCharacter setCharacterNFT={setCharacterNFT} />;\r\n    } else if (currentAccount && characterNFT) {\r\n      return <Arena characterNFT={characterNFT} setCharacterNFT={setCharacterNFT} />\r\n    }\r\n  };\r\n\r\n  const connectWalletAction = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        alert(\"Instale a MetaMask!\");\r\n        return;\r\n      }\r\n\r\n      const accounts = await ethereum.request({\r\n        method: \"eth_requestAccounts\",\r\n      });\r\n\r\n      /*\r\n       * Boom! Isso deve escrever o endereço público uma vez que autorizarmos Metamask.\r\n       */\r\n      console.log(\"Contectado\", accounts[0]);\r\n      setCurrentAccount(accounts[0]);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    checkIfWalletIsConnected();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container\">\r\n        <div className=\"header-container\">\r\n          <p className=\"header gradient-text\">⚔️ Batalhas no Cryptoverso ⚔️</p>\r\n          <p className=\"sub-text\">Junte os amigos e proteja o Cryptoverso!!</p>\r\n          {renderContent()}\r\n        </div>\r\n        <div className=\"footer-container\">\r\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\r\n          <a\r\n            className=\"footer-text\"\r\n            href={TWITTER_LINK}\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n          >{`built with @${TWITTER_HANDLE}`}</a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}